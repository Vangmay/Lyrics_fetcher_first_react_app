{"version":3,"sources":["logo.svg","config.js","Component/Home/Home.styles.js","Component/Home/index.js","Component/SearchBar/searchbar.styles.js","Component/SearchBar/index.js","Component/music.js","Hooks/useMusicFetch.js","App.js","reportWebVitals.js","index.js"],"names":["api","require","getLyrics","genius","apisettings","fetchMusic","searchTerm","a","search","InfoFetch","song","FetchLyrics","Artist","options","apiKey","title","artist","Wrapper","styled","div","Content","Song","Header","Children","Album","Img","src","SearchBar","setSearchTerm","useState","state","setState","initial","useRef","useEffect","current","timer","setTimeout","clearTimeout","type","placeholder","onChange","event","currentTarget","value","Music","setSearchterm","musicInfo","setMusicInfo","lyrics","setLyrics","console","log","musicFetch","API","response","data","hits","TITLE","result","IMAGE","song_art_image_url","ID","id","Image","SongId","JSON","stringify","FULL_TITLE","full_title","ALBUM","album","name","ALBUM_COVER_ART","cover_art_url","ARTIST","primary_artist","Title","Album_cover_art","LyricsFetch","Lyrics","SONGLYRICS","songId","useMusicFetch","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7793ce4a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","var api = require('genius-api');\r\nvar getLyrics = require('genius-lyrics-api/lib/getLyrics');\r\n\r\nvar genius = new api('ic5BXtCe9dTJdnc0-tU4unafdRArTIeJe_bBJGBNEQ06N-OlC_FKEwF54EgCfdkW')\r\n\r\n/*genius.search('Blinding lights').then(function(response){\r\n    //console.log(\"hits \", response);\r\n    var data = response.hits[0]\r\n    var TITLE = response.hits[0].result.title\r\n    var IMAGE = data.result.song_art_image_url\r\n    var ID = data.result.id\r\n});*/\r\n\r\n\r\n\r\n\r\nconst apisettings = {\r\n    fetchMusic: async (searchTerm) => {\r\n        return await( genius.search(searchTerm));\r\n    },\r\n\r\n    InfoFetch: async(searchTerm) => {\r\n        return await(genius.song(searchTerm));\r\n    },\r\n\r\n    FetchLyrics: async(searchTerm,Artist) => {\r\n        const options = {\r\n            apiKey: 'ic5BXtCe9dTJdnc0-tU4unafdRArTIeJe_bBJGBNEQ06N-OlC_FKEwF54EgCfdkW',\r\n            title: searchTerm,\r\n            artist: Artist,\r\n        }\r\n        return await ( getLyrics(options))\r\n    }\r\n}\r\n\r\n//apisettings.FetchLyrics('Blinding Lights', \"The weeknd\")\r\nexport default apisettings;\r\n//export default apiSettings;\r\n\r\n/*\r\nconst musicFetch = async(searchTerm) =>{\r\n\r\n    try{\r\n        const response = await apisettings.fetchMusic(searchTerm)\r\n        var data = response.hits[0]\r\n        var TITLE = response.hits[0].result.title\r\n        var IMAGE = data.result.song_art_image_url\r\n        var ID = data.result.id\r\n        //console.log(\"Title: \" , TITLE)\r\n        //console.log(\"Image: \" , IMAGE)\r\n        //console.log(\"ID: \" , ID)\r\n        console.log(ID)\r\n        return await(data)\r\n    }catch(error){\r\n        console.log('erro')\r\n    };\r\n};\r\n//musicFetch('Blinding Lights')\r\n\r\nconst InfoFetch = async(searchTerm) => {\r\n    try{\r\n        const musicInfo = await apisettings.InfoFetch(searchTerm)\r\n        //console.log(musicInfo.song)\r\n        var FULL_TITLE = musicInfo.song.full_title\r\n        var ALBUM = musicInfo.song.album.name\r\n        var ALBUM_COVER_ART = musicInfo.song.album.cover_art_url\r\n        var ARTIST = musicInfo.song.primary_artist.name\r\n        //console.log(FULL_TITLE)\r\n    }catch(error){\r\n        console.log(error)\r\n        console.log('error')\r\n    }\r\n};\r\nInfoFetch(5049949)\r\n//InfoFetch();////////////////////[WILL FETCH FURTHER IMAGES AND DETAILS]\r\n\r\nconst LyricsFetch = async() => {\r\n    try{\r\n        const Lyrics = await apisettings.FetchLyrics('blinding lights','The weeknd') \r\n        var SONGLYRICS = JSON.stringify(Lyrics)\r\n        return await (Lyrics);\r\n        \r\n    }catch(error){\r\n        console.log('error')\r\n        console.log(error)\r\n    }\r\n}\r\n\r\n//lyrics = LyricsFetch();\r\n//console.log(lyrics)      //////LyricsFetch{Will fetch only lyrics(supply name and artist(use other functions if possible))}\r\n//*/","import styled  from \"styled-components\";\r\n\r\n//Importing simp-worthy data\r\n\r\n\r\nexport const Wrapper = styled.div`\r\n    background-color: #63d471;\r\n    background-image: linear-gradient(180deg, #63d471 0%, #233329 74%);\r\n    padding:20px 20px;\r\n   \r\n`; \r\n\r\n\r\n\r\n\r\nexport const Content = styled.div`\r\n    background-color: #63d471;\r\n    background-image: linear-gradient(180deg, #63d471 0%, #233329 74%);\r\n    *{\r\n        overflow:none;\r\n    }\r\n    \r\n    width:100%;\r\n    h1{\r\n        position:relative;\r\n        top:120px;\r\n        left:40px;\r\n        font-size:1.2rem;\r\n    }\r\n    p{\r\n        position:relative;\r\n        top:120px;\r\n        left:40px;\r\n        font-size:0.9rem;\r\n        width:400px;\r\n        height:600px;\r\n        background:#00000022;\r\n        border-radius:25px;\r\n        padding:10px 10px 10px 10px;\r\n        overflow-y:scroll;\r\n        overflow-x:hidden;\r\n        ::-webkit-scrollbar {\r\n            width: 0.25rem;\r\n            height:025rem;\r\n            border-radius:5px\r\n        };\r\n        \r\n        ::-webkit-scrollbar-track {\r\n            background:transparent;\r\n        };\r\n        \r\n        ::-webkit-scrollbar-thumb {\r\n            background: #6649b8;\r\n        };\r\n        \r\n          \r\n    \r\n          \r\n    }\r\n    img{\r\n        position:relative;\r\n        bottom:550px;\r\n        left:850px;\r\n        width:600px;\r\n        height:600px;\r\n    }\r\n\r\n`; \r\n\r\n","import React from 'react'\r\n\r\n\r\n//SIMP WORTHY DATA FUNCTIONS\r\n\r\n\r\n\r\nimport {Content,Wrapper} from './Home.styles'\r\nconst Song = ({Header, Children, Album,Img}) => (\r\n    <Wrapper>\r\n        <Content>\r\n            <h1>{ Header }</h1>\r\n            <h1>{Album}</h1>\r\n            <p> { Children }</p>\r\n            <img src = {Img}></img>\r\n        </Content>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Song;","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    align-items:center;\r\n    height:100px;\r\n    background:var(darkgrey);\r\n    padding:0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n    position:absolute;\r\n    bottom:20px;\r\n    max-width:1600px;\r\n    width:100%;\r\n    height:55px;\r\n    border:solid 3px black;\r\n    border-radius:25px;\r\n    border-radius:40px;\r\n    color:var(#111111);\r\n\r\n    \r\n    input{\r\n        font-size:var(50px);\r\n        position:absolute;\r\n        left:0;\r\n        margin:8px 0;\r\n        padding:0 0 0 20px;\r\n        border:0;\r\n        width:95%;\r\n        background:transparent;\r\n        height:40px;\r\n        color:#ececec;\r\n        :focus{\r\n            outline:none;\r\n        }\r\n    }\r\n`;","import React,{useState, useEffect, useRef} from 'react'\r\n\r\nimport { Wrapper,Content }from './searchbar.styles'\r\n\r\nconst SearchBar = ({setSearchTerm}) => {\r\n    const [state,setState] = useState('');\r\n    const initial = useRef(true);\r\n\r\n    useEffect(()=>{\r\n        if(initial.current){\r\n            initial.current = false; \r\n            return;\r\n        }\r\n        const timer = setTimeout(() => {\r\n            setSearchTerm(state)\r\n        }, 500);\r\n\r\n        return () => clearTimeout(timer)\r\n    },[setSearchTerm,state])\r\n\r\n    return(\r\n        <Wrapper>\r\n            <Content>\r\n                <input type='text' \r\n                placeholder = 'Search Song' \r\n                onChange = {event => setState(event.currentTarget.value)} \r\n                value={state}/>\r\n            </Content>\r\n        </Wrapper>\r\n    );\r\n};\r\nexport default SearchBar","import React from 'react'\r\n\r\n//Hooks\r\nimport { useMusicFetch } from '../Hooks/useMusicFetch'\r\n\r\n//Components\r\nimport Song from './Home'\r\nimport SearchBar from './SearchBar'\r\n\r\n\r\nconst Music = () => {\r\n    const{state,lyrics,musicInfo,setSearchterm} = useMusicFetch();\r\n    //console.log(\"State: \"+ state)\r\n    //console.log(\"Info: \"+ musicInfo)\r\n    console.log(\"lyrics \"+ lyrics.Lyrics)\r\n    console.log(\"stateTITLE \"+state.Title)\r\n    return(\r\n    <>\r\n        \r\n        <Song Header = {musicInfo.Title} Album = {musicInfo.Album} Children = {lyrics.Lyrics} Img = {state.Image}></Song>\r\n        <SearchBar setSearchTerm = {setSearchterm}/>\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Music","import {useState} from \"react\";\r\nimport {useEffect} from \"react\";\r\n//const useState = require('react')\r\n\r\n//var API = require('../config')\r\nimport API from '../config'\r\n\r\nexport const useMusicFetch = () => {\r\n    const [searchTerm, setSearchterm] = useState('');\r\n    const[state, setState] = useState({});\r\n    const[musicInfo, setMusicInfo] = useState({});\r\n    const[lyrics, setLyrics] = useState({})\r\n    console.log(\"search term\" + searchTerm)\r\n    useEffect(() => {\r\n\r\n        const musicFetch = async() =>{\r\n\r\n            try{\r\n                const response = await API.fetchMusic(searchTerm)\r\n                var data = response.hits[0]\r\n                var TITLE = response.hits[0].result.title\r\n                var IMAGE = data.result.song_art_image_url\r\n                var ID = data.result.id\r\n                //console.log(\"Title: \" , TITLE)\r\n                //console.log(\"Image: \" , IMAGE)\r\n                //console.log(\"ID: \" , ID)\r\n                setState({\r\n                    ...TITLE,\r\n                    Image: IMAGE,\r\n                    SongId: ID \r\n                });\r\n                \r\n                console.log(TITLE)\r\n                console.log(\"state: \"+ JSON.stringify(state))\r\n            }catch(error){\r\n                console.log('erro')\r\n            };\r\n        };\r\n        \r\n        const InfoFetch = async() => {\r\n            try{\r\n                const musicInfo = await API.InfoFetch(state.SongId)\r\n                //console.log(musicInfo.song)\r\n                var FULL_TITLE = JSON.stringify(musicInfo.song.full_title)\r\n                var ALBUM = musicInfo.song.album.name\r\n                var ALBUM_COVER_ART = musicInfo.song.album.cover_art_url\r\n                var ARTIST = musicInfo.song.primary_artist.name\r\n                console.log(\"Full title: \"+ FULL_TITLE)\r\n                console.log(\"ALBUM: \"+ ALBUM)\r\n                console.log(\"ALBUM COVERART: \"+ ALBUM_COVER_ART)\r\n                console.log(\"ARTIST: \"+ ARTIST)\r\n                setMusicInfo({\r\n                    Title : FULL_TITLE,\r\n                    Artist : ARTIST,\r\n                    Album: ALBUM, \r\n                    Album_cover_art: ALBUM_COVER_ART\r\n                })\r\n                //console.log(FULL_TITLE)\r\n            }catch(error){\r\n                console.log(error)\r\n                console.log('error')\r\n            }\r\n        };\r\n        \r\n        //InfoFetch();////////////////////[WILL FETCH FURTHER IMAGES AND DETAILS]\r\n        \r\n        const LyricsFetch = async() => {\r\n            try{\r\n                const Lyrics = await API.FetchLyrics(searchTerm,musicInfo.Artist) \r\n                var SONGLYRICS = Lyrics\r\n                console.log(SONGLYRICS)\r\n                setLyrics({\r\n                    Lyrics:SONGLYRICS\r\n                })\r\n                \r\n            }catch(error){\r\n                console.log('error')\r\n                console.log(error)\r\n            }\r\n        }\r\n\r\n        musicFetch()\r\n        InfoFetch()\r\n        LyricsFetch()\r\n\r\n    },[searchTerm,musicInfo.Artist,state.songId]);\r\n\r\n    return{state,lyrics,musicInfo,setSearchterm};\r\n\r\n};","import logo from './logo.svg';\nimport './App.css';\nimport Music from './Component/music';\n//import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n\n\nconst App = () => (\n  <Music></Music>\n  )\n  \n  export default App;\n  \n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}